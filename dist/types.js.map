{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAAA,2CAA4D;AAC5D,mCAAsC;AAiEtC,IAAY,cAKX;AALD,WAAY,cAAc;IACxB,mCAAiB,CAAA;IACjB,6BAAW,CAAA;IACX,mCAAiB,CAAA;IACjB,qCAAmB,CAAA;AACrB,CAAC,EALW,cAAc,8BAAd,cAAc,QAKzB;AAmMD,MAAa,SAAU,SAAQ,qBAAY;IACzC,IAAI,CACF,KAAQ,EACR,GAAG,IAAkE;QAErE,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,EAAE,CACA,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,IAAI,CACF,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,GAAG,CACD,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;CACF;AA5BD,8BA4BC","sourcesContent":["import { RCEEvent, QuickChat, LogLevel } from \"./constants\";\nimport { EventEmitter } from \"events\";\n\nexport interface LoggerOptions {\n  logLevel?: number;\n  logFile?: string;\n}\n\nexport interface AuthOptions {\n  servers?: ServerOptions[];\n  email: string;\n  password: string;\n}\n\nexport interface Auth {\n  access_token: string;\n  refresh_token: string;\n  token_type: \"Bearer\";\n  expires_in: number;\n}\n\nexport interface RustServer {\n  identifier: string;\n  serverId: number;\n  trueServerId?: number;\n  region: \"US\" | \"EU\";\n  refreshPlayers?: number;\n  refreshPlayersInterval?: NodeJS.Timeout;\n  rfBroadcasting?: boolean;\n  rfBroadcastingInterval?: NodeJS.Timeout;\n  currentRfBroadcasts: number[];\n  heliFeeds?: boolean;\n  heliFeedsInterval?: NodeJS.Timeout;\n  bradFeeds?: boolean;\n  bradFeedsInterval?: NodeJS.Timeout;\n  state?: string | string[];\n  flags: string[];\n  players: string[];\n  added: boolean;\n  ready: boolean;\n  serviceState: string;\n}\n\nexport interface ServerOptions {\n  identifier: string;\n  serverId: number;\n  region: \"US\" | \"EU\";\n  refreshPlayers?: number;\n  rfBroadcasting?: boolean;\n  heliFeeds?: boolean;\n  bradFeeds?: boolean;\n  state?: string | string[];\n}\n\nexport interface WebsocketRequest {\n  identifier: string;\n  region: \"US\" | \"EU\";\n  sid: number;\n}\n\nexport interface WebsocketMessage {\n  type: \"connection_ack\" | \"data\" | \"error\" | \"ka\";\n  payload: any;\n  id: string;\n}\n\nexport enum KillPlayerType {\n  Player = \"player\",\n  Npc = \"npc\",\n  Entity = \"entity\",\n  Natural = \"natural\",\n}\n\nexport interface KillPlayer {\n  id: string;\n  type: KillPlayerType;\n  name: string;\n}\n\nexport interface EventPayload {\n  server: RustServer;\n}\n\nexport interface MessageEventPayload extends EventPayload {\n  message: string;\n}\n\nexport interface PlayerListUpdateEventPayload extends EventPayload {\n  players: string[];\n  joined: string[];\n  left: string[];\n}\n\nexport interface QuickChatEventPayload extends EventPayload {\n  type: \"local\" | \"server\" | \"team\";\n  ign: string;\n  message: QuickChat;\n}\n\nexport interface PlayerJoinedEventPayload extends EventPayload {\n  ign: string;\n}\n\nexport interface PlayerLeftEventPayload extends EventPayload {\n  ign: string;\n}\n\nexport interface PlayerSuicideEventPayload extends EventPayload {\n  ign: string;\n}\n\nexport interface PlayerRespawnedEventPayload extends EventPayload {\n  ign: string;\n  platform: \"XBL\" | \"PS\";\n}\n\nexport interface PlayerRoleAddEventPayload extends EventPayload {\n  ign: string;\n  role: string;\n}\n\nexport interface NoteEditEventPayload extends EventPayload {\n  ign: string;\n  oldContent: string;\n  newContent: string;\n}\n\nexport interface EventStartEventPayload extends EventPayload {\n  event:\n    | \"Airdrop\"\n    | \"Cargo Ship\"\n    | \"Chinook\"\n    | \"Patrol Helicopter\"\n    | \"Halloween\"\n    | \"Christmas\"\n    | \"Easter\"\n    | \"Patrol Helicopter Debris\"\n    | \"Bradley APC Debris\"\n    | \"Oil Rig\"\n    | \"Small Oil Rig\";\n  special: boolean;\n}\n\nexport interface PlayerKillEventPayload extends EventPayload {\n  victim: KillPlayer;\n  killer: KillPlayer;\n}\n\nexport interface ItemSpawnEventPayload extends EventPayload {\n  ign: string;\n  item: string;\n  quantity: number;\n}\n\nexport interface VendingMachineNameEventPayload extends EventPayload {\n  ign: string;\n  oldName: string;\n  newName: string;\n}\n\nexport interface TeamCreateEventPayload extends EventPayload {\n  owner: string;\n  id: number;\n}\n\nexport interface TeamJoinEventPayload extends EventPayload {\n  ign: string;\n  owner: string;\n  id: number;\n}\n\nexport interface TeamLeaveEventPayload extends EventPayload {\n  ign: string;\n  owner: string;\n  id: number;\n}\n\nexport interface KitSpawnEventPayload extends EventPayload {\n  ign: string;\n  kit: string;\n}\n\nexport interface KitGiveEventPayload extends EventPayload {\n  admin: string;\n  ign: string;\n  kit: string;\n}\n\nexport interface SpecialEventStartEventPayload extends EventPayload {\n  event: \"Easter\" | \"Halloween\" | \"Xmas\" | \"HalloweenPortal\" | \"XmasPortal\";\n}\n\nexport interface SpecialEventEndEventPayload extends EventPayload {}\n\nexport interface ExecutingCommandEventPayload extends EventPayload {\n  command: string;\n}\n\nexport interface RCEErrorPayload extends EventPayload {\n  error: string;\n}\n\nexport interface ServiceStateEventPayload extends EventPayload {\n  state:\n    | \"STOPPING\"\n    | \"MAINTENANCE\"\n    | \"UPDATING\"\n    | \"STOPPED\"\n    | \"STARTING\"\n    | \"RUNNING\";\n}\n\nexport interface RCELogPayload {\n  level: LogLevel;\n  content: string;\n}\n\nexport interface CustomZoneAddedEventPayload extends EventPayload {\n  name: string;\n}\n\nexport interface CustomZoneRemovedEventPayload extends EventPayload {\n  name: string;\n}\n\nexport interface FrequencyReceivedEventPayload extends EventPayload {\n  frequency: number;\n  coordinates: number[];\n  range: number;\n}\n\nexport interface FrequencyLostEventPayload extends EventPayload {\n  frequency: number;\n}\n\nexport interface RCEEventTypes {\n  [RCEEvent.Message]: MessageEventPayload;\n  [RCEEvent.PlayerListUpdate]: PlayerListUpdateEventPayload;\n  [RCEEvent.QuickChat]: QuickChatEventPayload;\n  [RCEEvent.PlayerJoined]: PlayerJoinedEventPayload;\n  [RCEEvent.PlayerLeft]: PlayerLeftEventPayload;\n  [RCEEvent.PlayerSuicide]: PlayerSuicideEventPayload;\n  [RCEEvent.PlayerRespawned]: PlayerRespawnedEventPayload;\n  [RCEEvent.PlayerRoleAdd]: PlayerRoleAddEventPayload;\n  [RCEEvent.NoteEdit]: NoteEditEventPayload;\n  [RCEEvent.EventStart]: EventStartEventPayload;\n  [RCEEvent.PlayerKill]: PlayerKillEventPayload;\n  [RCEEvent.ItemSpawn]: ItemSpawnEventPayload;\n  [RCEEvent.VendingMachineName]: VendingMachineNameEventPayload;\n  [RCEEvent.KitSpawn]: KitSpawnEventPayload;\n  [RCEEvent.KitGive]: KitGiveEventPayload;\n  [RCEEvent.TeamCreate]: TeamCreateEventPayload;\n  [RCEEvent.TeamJoin]: TeamJoinEventPayload;\n  [RCEEvent.TeamLeave]: TeamLeaveEventPayload;\n  [RCEEvent.SpecialEventStart]: SpecialEventStartEventPayload;\n  [RCEEvent.SpecialEventEnd]: SpecialEventEndEventPayload;\n  [RCEEvent.ExecutingCommand]: ExecutingCommandEventPayload;\n  [RCEEvent.Error]: RCEErrorPayload;\n  [RCEEvent.Log]: RCELogPayload;\n  [RCEEvent.ServiceState]: ServiceStateEventPayload;\n  [RCEEvent.CustomZoneAdded]: CustomZoneAddedEventPayload;\n  [RCEEvent.CustomZoneRemoved]: CustomZoneRemovedEventPayload;\n  [RCEEvent.FrequencyReceived]: FrequencyReceivedEventPayload;\n  [RCEEvent.FrequencyLost]: FrequencyLostEventPayload;\n}\n\nexport class RCEEvents extends EventEmitter {\n  emit<K extends keyof RCEEventTypes>(\n    event: K,\n    ...args: RCEEventTypes[K] extends undefined ? [] : [RCEEventTypes[K]]\n  ): boolean {\n    return super.emit(event, ...args);\n  }\n\n  on<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.on(event, listener);\n  }\n\n  once<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.once(event, listener);\n  }\n\n  off<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.off(event, listener);\n  }\n}\n"]}