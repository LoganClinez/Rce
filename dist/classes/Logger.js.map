{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../src/classes/Logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { LogLevel, RCEEvent } from \"../constants\";\nimport { inspect } from \"util\";\nimport { type LoggerOptions } from \"../types\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport RCEManager from \"./RCEManager\";\n\nenum ConsoleColor {\n  Reset = \"\\x1b[0m\",\n  FgRed = \"\\x1b[31m\",\n  FgGreen = \"\\x1b[32m\",\n  FgYellow = \"\\x1b[33m\",\n  FgCyan = \"\\x1b[36m\",\n  FgMagenta = \"\\x1b[35m\",\n}\n\ninterface LogType {\n  prefix: string;\n  emoji: string;\n  color: string;\n}\n\nexport default class Logger {\n  private emitter: RCEManager;\n  private level: LogLevel;\n  private file: string | undefined;\n\n  private static LOG_TYPES: Record<string, LogType> = {\n    warn: { prefix: \"[WARNING]\", emoji: \"⚠️\", color: ConsoleColor.FgYellow },\n    info: { prefix: \"[INFO]\", emoji: \"💬\", color: ConsoleColor.FgCyan },\n    debug: { prefix: \"[DEBUG]\", emoji: \"🔧\", color: ConsoleColor.FgMagenta },\n    error: { prefix: \"[ERROR]\", emoji: \"❌\", color: ConsoleColor.FgRed },\n  };\n\n  public constructor(emitter: RCEManager, opts: LoggerOptions) {\n    this.level = opts.logLevel ?? LogLevel.Info;\n    this.file = opts.logFile;\n    this.emitter = emitter;\n\n    if (this.file) {\n      this.validateFilePath();\n    }\n  }\n\n  private validateFilePath(): void {\n    if (this.file && !fs.existsSync(this.file)) {\n      const dir = path.dirname(this.file);\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n      }\n      fs.writeFileSync(this.file, \"\");\n    }\n  }\n\n  private handleFileSize(): void {\n    if (this.file) {\n      const stats = fs.statSync(this.file);\n      if (stats.size > 5) {\n        const archiveName = `${this.file}.${uuidv4()}.log`;\n        fs.renameSync(this.file, archiveName);\n        fs.writeFileSync(this.file, \"\");\n      }\n    }\n  }\n\n  private async logToFileAsync(type: string, content: any): Promise<void> {\n    if (this.file) {\n      const stats = await fs.promises.stat(this.file).catch(() => null);\n      if (stats && stats.size > 300_000_000) {\n        const archiveName = `${this.file}.${uuidv4()}.log`;\n        await fs.promises.rename(this.file, archiveName);\n        await fs.promises.writeFile(this.file, \"\");\n      }\n\n      const logMessage =\n        typeof content === \"string\"\n          ? `[${type.toUpperCase()}]: ${content}\\n`\n          : `[${type.toUpperCase()}]: ${inspect(content, { depth: 5 })}\\n`;\n\n      await fs.promises.appendFile(this.file, logMessage);\n    }\n  }\n\n  private format(content: any): string {\n    return typeof content === \"string\"\n      ? content\n      : inspect(content, { depth: 5 });\n  }\n\n  private formatTimestamp(date: Date): string {\n    return date.toLocaleTimeString([], { hour12: true });\n  }\n\n  private log(\n    level: LogLevel,\n    type: string,\n    content: any,\n    logType: LogType\n  ): void {\n    this.handleFileSize();\n    this.logToFileAsync(type, content).catch(console.error);\n\n    if (this.level !== LogLevel.None && level <= this.level) {\n      const timestamp = this.formatTimestamp(new Date());\n      const formattedMessage = `\\x1b[90m[${timestamp}]\\x1b[0m  ${logType.color}${logType.prefix}${ConsoleColor.Reset}  ${logType.emoji}  ${this.format(content)}`;\n\n      console.log(formattedMessage);\n      this.emitter.emit(RCEEvent.Log, { level, content: this.format(content) });\n    }\n  }\n\n  public logMessage(level: LogLevel, type: keyof typeof Logger.LOG_TYPES, content: any): void {\n    const logType = Logger.LOG_TYPES[type];\n    this.log(level, type, content, logType);\n  }\n\n  public warn(content: any): void {\n    this.logMessage(LogLevel.Warn, \"warn\", content);\n  }\n\n  public info(content: any): void {\n    this.logMessage(LogLevel.Info, \"info\", content);\n  }\n\n  public debug(content: any): void {\n    this.logMessage(LogLevel.Debug, \"debug\", content);\n  }\n\n  public error(content: any): void {\n    this.logMessage(LogLevel.Error, \"error\", content);\n  }\n}"]}