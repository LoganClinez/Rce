{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../src/classes/Logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { LogLevel, RCEEvent } from \"../constants\";\nimport { inspect } from \"util\";\nimport { type LoggerOptions } from \"../types\";\nimport fs from \"fs\";\nimport RCEManager from \"./RCEManager\";\n\nenum ConsoleColor {\n  Reset = \"\\x1b[0m\",\n  FgRed = \"\\x1b[31m\",\n  FgGreen = \"\\x1b[32m\",\n  FgYellow = \"\\x1b[33m\",\n  FgCyan = \"\\x1b[36m\",\n  FgMagenta = \"\\x1b[35m\",\n}\n\ninterface LogType {\n  prefix: string;\n  emoji: string;\n  color: string;\n}\n\nexport default class Logger {\n  private emitter: RCEManager;\n  private level: LogLevel;\n  private file: string | undefined;\n\n  public constructor(emitter: RCEManager, opts: LoggerOptions) {\n    this.level = opts.logLevel ?? LogLevel.Info;\n    this.file = opts.logFile;\n    this.emitter = emitter;\n  }\n\n  private logToFile(type: string, content: any): void {\n    if (this.file) {\n      const stats = fs.statSync(this.file);\n      if (stats.size > 300000000) {\n        fs.writeFileSync(this.file, \"\");\n      }\n\n      const logMessage =\n        typeof content === \"string\"\n          ? `[${type.toUpperCase()}]: ${content}\\n`\n          : `[${type.toUpperCase()}]: ${inspect(content, { depth: 5 })}\\n`;\n\n      fs.appendFileSync(this.file, logMessage);\n    }\n  }\n\n  private format(content: any): string {\n    return typeof content === \"string\"\n      ? content\n      : inspect(content, { depth: 5 });\n  }\n\n  private log(\n    level: LogLevel,\n    type: string,\n    content: any,\n    logType: LogType\n  ): void {\n    this.logToFile(type, content);\n  \n    if (this.level !== LogLevel.None && level <= this.level) {\n      const date = new Date();\n      const timestamp = date.toLocaleTimeString([], { hour12: false });\n  \n      // Instead of padding, ensure that the logType.prefix and emoji are together without extra spaces.\n      const formattedMessage = `\\x1b[90m[${timestamp}]\\x1b[0m ${logType.color}${logType.prefix}${ConsoleColor.Reset} ${logType.emoji} ${this.format(content)}`;\n  \n      console.log(formattedMessage, this.format(content));\n  \n      this.emitter.emit(RCEEvent.Log, { level, content: this.format(content) });\n    }\n  }\n\n  public warn(content: any): void {\n    const logType: LogType = {\n      prefix: \"[WARNING]\",\n      emoji: \"⚠️ \",\n      color: ConsoleColor.FgYellow,\n    };\n    this.log(LogLevel.Warn, \"warn\", content, logType);\n  }\n\n  public info(content: any): void {\n    const logType: LogType = {\n      prefix: \"[INFO]\",\n      emoji: \"💬\",\n      color: ConsoleColor.FgCyan,\n    };\n    this.log(LogLevel.Info, \"info\", content, logType);\n  }\n\n  public debug(content: any): void {\n    const logType: LogType = {\n      prefix: \"[DEBUG]\",\n      emoji: \"🔧\",\n      color: ConsoleColor.FgGreen,\n    };\n    this.log(LogLevel.Debug, \"debug\", content, logType);\n  }\n\n  public error(content: any): void {\n    const logType: LogType = {\n      prefix: \"[ERROR]\",\n      emoji: \"❌\",\n      color: ConsoleColor.FgRed,\n    };\n    this.log(LogLevel.Error, \"error\", content, logType);\n  }\n}\n"]}